/*****************************************************************************
 MIT License

 Copyright(c) 2022 Alexander Veselov

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this softwareand associated documentation files(the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions :

 The above copyright noticeand this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 *****************************************************************************/

layout (local_size_x = 32, local_size_y = 32) in;

#include "src/kernels/constants.h"
#include "src/kernels/shared_structures.h"

uniform uint width;
uniform uint height;

layout(std430, binding = 0) buffer Rays 
{
    Ray rays[];
};

layout(std430, binding = 1) buffer RTTriangles 
{
    RTTriangle triangles[];
};

layout(std430, binding = 2) buffer Hits
{
    Hit hits[];
};

layout(binding = 0) uniform usampler2D geometry_info_sampler;

bool RayTriangle(Ray ray, RTTriangle triangle, out float2 bc, out float out_t)
{
    float3 e1 = triangle.position2 - triangle.position1;
    float3 e2 = triangle.position3 - triangle.position1;
    // Calculate planes normal vector
    float3 pvec = cross(ray.direction.xyz, e2);
    float det = dot(e1, pvec);

    // Ray is parallel to plane
    if (det < 1e-8f || -det > 1e-8f)
    {
        return false;
    }

    float inv_det = 1.0f / det;
    float3 tvec = ray.origin.xyz - triangle.position1;
    float u = dot(tvec, pvec) * inv_det;

    if (u < 0.0f || u > 1.0f)
    {
        return false;
    }

    float3 qvec = cross(tvec, e1);
    float v = dot(ray.direction.xyz, qvec) * inv_det;

    if (v < 0.0f || u + v > 1.0f)
    {
        return false;
    }

    float t = dot(e2, qvec) * inv_det;
    float t_min = ray.origin.w;
    float t_max = ray.direction.w;

    if (t < t_min || t > t_max)
    {
        return false;
    }

    // Intersection is found
    bc = float2(u, v);
    out_t = t;

    return true;
}

void main()
{
    uint2 pixel_pos = gl_GlobalInvocationID.xy;

    if (pixel_pos.x >= width || pixel_pos.y >= height)
    {
        return;
    }

    uint geom_info = texelFetch(geometry_info_sampler, ivec2(pixel_pos), 0).x;

    uint pixel_index = pixel_pos.y * width + pixel_pos.x;

    bool is_background = (geom_info == 0);
    uint triangle_idx = (geom_info - 1);

    Hit hit;
    hit.bc = float2(0.0f, 0.0f);
    hit.primitive_id = is_background ? INVALID_ID : triangle_idx;
    hit.t = 0.0f;

    if (!is_background)
    {
        Ray ray = rays[pixel_index];
        RTTriangle triangle = triangles[triangle_idx];
        RayTriangle(ray, triangle, hit.bc, hit.t);
    }

    hits[pixel_index] = hit;
}
